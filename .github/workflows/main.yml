name: SeaLogix CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Set up Node.js
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    # Install Python dependencies
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt

    # Install Node.js dependencies
    - name: Install Node.js dependencies
      run: npm ci

    # Run Python tests
    - name: Run Python tests
      run: |
        pytest tests/ --cov=./ --cov-report=xml

    # Run frontend tests and build
    - name: Run frontend tests and build
      run: |
        npm run lint
        npm run build

    # Upload coverage reports
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    # Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Build and push backend
    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: .
        file: deployment/Dockerfile.backend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/sealogix-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/sealogix-backend:${{ github.sha }}

    # Build and push frontend
    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: .
        file: deployment/Dockerfile.frontend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/sealogix-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/sealogix-frontend:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    # Deploy to production (example using Docker Compose)
    - name: Deploy to production
      env:
        DOCKER_HOST: ${{ secrets.PRODUCTION_HOST }}
        DOCKER_USERNAME: ${{ secrets.PRODUCTION_USERNAME }}
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        # Write the SSH key
        mkdir -p ~/.ssh
        echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Add host key
        ssh-keyscan -H $DOCKER_HOST >> ~/.ssh/known_hosts
        
        # Copy docker-compose file
        scp deployment/docker-compose.yml $DOCKER_USERNAME@$DOCKER_HOST:~/
        
        # Pull new images and restart services
        ssh $DOCKER_USERNAME@$DOCKER_HOST '
          docker-compose pull
          docker-compose up -d
          docker system prune -f
        '

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
